#ifndef DATAGRID_H
#define DATAGRID_H

#include <QAbstractItemModel>
#include <QMutex>
#include <QQmlEngine>
#include <QQueue>
#include <QQuickItem>
#include <QQuickWindow>
#include <QSortFilterProxyModel>
#include <QTimer>

class DataGridColumn;
class DataGridDragItemPresenter;
class DataGridHeaderItemPresenter;
class DataGridHeaderPresenter;
class DataGridItemLayout;
class DataGridRowPresenter;
class DataGridSortFilterProxyModel;
class FilterAcceptsRowEventArgs;
class ObservableObjectEventArgs;
class DataGrid : public QQuickItem
{
    Q_OBJECT
    Q_PROPERTY(bool allowHeaderMoving READ allowHeaderMoving WRITE setAllowHeaderMoving NOTIFY allowHeaderMovingChanged)
    Q_PROPERTY(bool autogenerateColumns READ autogenerateColumns WRITE setAutogenerateColumns NOTIFY autogenerateColumnsChanged)
    Q_PROPERTY(bool backgroundEnabled READ backgroundEnabled WRITE setBackgroundEnabled NOTIFY backgroundEnabledChanged)
    Q_PROPERTY(bool isReadOnly READ isReadOnly WRITE setIsReadOnly NOTIFY isReadOnlyChanged)
    Q_PROPERTY(bool sortEnabled READ sortEnabled WRITE setSortEnabled NOTIFY sortEnabledChanged)
    Q_PROPERTY(bool showBorder READ showBorder WRITE setShowBorder NOTIFY showBorderChanged)
    Q_PROPERTY(DataGridItemLayout* itemLayout READ itemLayout)
    Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentIndexChanged)
    Q_PROPERTY(int itemHeight READ itemHeight WRITE setItemHeight NOTIFY itemHeightChanged)
    Q_PROPERTY(int rowCount READ rowCount NOTIFY rowCountChanged)
    Q_PROPERTY(QAbstractItemModel* model READ model WRITE setModel NOTIFY modelChanged)
    Q_PROPERTY(QQmlComponent* defaultHeaderDelegate READ defaultHeaderDelegate WRITE setDefaultHeaderDelegate NOTIFY defaultHeaderDelegateChanged)
    Q_PROPERTY(QQmlComponent* defaultItemDelegate READ defaultItemDelegate WRITE setDefaultItemDelegate NOTIFY defaultItemDelegateChanged)
    Q_PROPERTY(qreal headerHeight READ headerHeight NOTIFY headerHeightChanged)
    Q_PROPERTY(qreal layoutWidth READ layoutWidth NOTIFY layoutWidthChanged)
    Q_PROPERTY(QString alternativeRowBackground READ alternativeRowBackground WRITE setAlternativeRowBackground NOTIFY alternativeRowBackgroundChanged)
    Q_PROPERTY(QString borderColor READ borderColor WRITE setBorderColor NOTIFY borderColorChanged)
    Q_PROPERTY(QString headerBackground READ headerBackground WRITE setHeaderBackground NOTIFY headerBackgroundChanged)
    Q_PROPERTY(QString highlightColor READ highlightColor WRITE setHighlightColor NOTIFY highlightColorChanged)
    Q_PROPERTY(QString inactiveHighlightColor READ inactiveHighlightColor WRITE setInactiveHighlightColor NOTIFY inactiveHighlightColorChanged)
    Q_PROPERTY(QString observablePropertyName READ observablePropertyName WRITE setObservablePropertyName NOTIFY observablePropertyNameChanged)
    Q_PROPERTY(QStringList skipRoles READ skipRoles WRITE setSkipRoles NOTIFY skipRolesChanged)
    Q_PROPERTY(Qt::CaseSensitivity filterCaseSensitivity READ filterCaseSensitivity WRITE setFilterCaseSensitivity)
    Q_PROPERTY(SelectionMode selectionMode READ selectionMode WRITE setSelectionMode NOTIFY selectionModeChanged)
public:
    enum SelectionMode {
        NoSelection = 0,
        SingleRow = 1,
        MultipleRows = 2
    };

    Q_ENUM(SelectionMode)

    explicit DataGrid(QQuickItem *parent = Q_NULLPTR);
    bool allowHeaderMoving() const;
    bool autogenerateColumns() const;
    bool backgroundEnabled() const;
    bool dragDropStarted();
    bool isReadOnly() const;
    bool showBorder() const;
    bool sortEnabled() const;
    DataGridColumn* getColumnByIndex(int index);
    DataGridColumn* getColumnByRole(QString role);
    DataGridItemLayout* itemLayout() const;
    int currentIndex() const;
    int getColumnIndex(DataGridColumn* column);
    int itemHeight() const;
    int rowCount() const;
    QAbstractItemModel* model() const;
    QList<DataGridColumn*> columns() const;
    QQmlComponent* defaultHeaderDelegate() const;
    QQmlComponent* defaultItemDelegate() const;
    QQuickItem* dragLayout();
    qreal headerHeight() const;
    qreal layoutWidth() const;
    QSortFilterProxyModel* sortFilterProxyModel() const;
    QString alternativeRowBackground() const;
    QString borderColor() const;
    QString headerBackground() const;
    QString highlightColor() const;
    QString inactiveHighlightColor() const;
    QString observablePropertyName() const;
    QStringList skipRoles() const;
    Qt::CaseSensitivity filterCaseSensitivity() const;
    SelectionMode selectionMode() const;
    void selectRow(int row, QMouseEvent *event = NULL);

private:
    DataGridRowPresenter* popItemFromPool();
    int getFirstDisplayedIndex();
    int getLastDisplayedIndex();
    int getRowOffset(int row);
    QPair<int, int> displayedRowRange();
    void alignRow(int row);
    void clearAutogeneratedColumns();
    void clearRows();
    void populateAutogeneratedColumns();
    void populateRows();
    void pushItemToPool(DataGridRowPresenter* item);
    void updateScrollBar();

private slots:
    void modelDataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector<int> &roles = QVector<int>());
    void modelLayoutChanged(const QList<QPersistentModelIndex> &parents = QList<QPersistentModelIndex>(), QAbstractItemModel::LayoutChangeHint hint = QAbstractItemModel::NoLayoutChangeHint);
    void modelReset();
    void modelRowsInserted(const QModelIndex &parent, int first, int last);
    void modelRowsMoved(const QModelIndex &parent, int start, int end, const QModelIndex &destination, int row);
    void modelRowsRemoved(const QModelIndex &parent, int first, int last);
    void rowHeightChanged();

public slots:
    bool isRowSelected(int row);
    QVariant getUnfilteredValue(int rowIndex, QString role);
    QVariant getValue(int rowIndex, QString role);
    virtual bool filterAcceptsRowHandler(int source_row, const QModelIndex &source_parent);
    virtual QObject* getObservableObject(int row);
    void alignRowToBottom(int row);
    void alignRowToTop(int row);
    void beginDragDrop(DataGridHeaderItemPresenter *header, const QImage &image, qreal x, qreal y);
    void decrementCurrentIndex();
    void endDragDrop();
    void incrementCurrentIndex();
    void invalidate();
    void onDrag(qreal x, qreal y);
    void setAllowHeaderMoving(bool allowHeaderMoving);
    void setAlternativeRowBackground(QString alternativeRowBackground);
    void setAutogenerateColumns(bool autogenerateColumns);
    void setBackgroundEnabled(bool backgroundEnabled);
    void setBorderColor(QString borderColor);
    void setCurrentIndex(int currentIndex, bool align = true);
    void setDefaultHeaderDelegate(QQmlComponent* defaultHeaderDelegate);
    void setDefaultItemDelegate(QQmlComponent* defaultItemDelegate);
    void setFilterCaseSensitivity(Qt::CaseSensitivity filterCaseSensitivity);
    void setHeaderBackground(QString headerBackground);
    void setHighlightColor(QString highlightColor);
    void setInactiveHighlightColor(QString inactiveHighlightColor);
    void setIsReadOnly(bool isReadOnly);
    void setItemHeight(int itemHeight);
    void setModel(QAbstractItemModel *model);
    void setObservablePropertyName(QString observablePropertyName);
    void setSelectionMode(SelectionMode selectionMode);
    void setShowBorder(bool showBorder);
    void setSkipRoles(QStringList skipRoles);
    void setSortEnabled(bool sortEnabled);
    void updateVisibleRange(bool refreshVisible = false);

signals:
    void allowHeaderMovingChanged(bool allowHeaderMoving);
    void alternativeRowBackgroundChanged();
    void autogenerateColumnsChanged(bool autogenerateColumns);
    void backgroundEnabledChanged(bool backgroundEnabled);
    void borderColorChanged(QString borderColor);
    void columnsChanged(QList<DataGridColumn*> columns);
    void currentIndexChanged(int currentIndex);
    void defaultHeaderDelegateChanged(QQmlComponent* defaultHeaderDelegate);
    void defaultItemDelegateChanged(QQmlComponent* defaultItemDelegate);
    void filterAcceptsRow(FilterAcceptsRowEventArgs* eventArgs);
    void headerBackgroundChanged();
    void headerHeightChanged();
    void highlightColorChanged();
    void inactiveHighlightColorChanged();
    void isReadOnlyChanged(bool isReadOnly);
    void itemHeightChanged(int itemHeight);
    void layoutWidthChanged();
    void modelChanged(QAbstractItemModel *model);
    void observableObjectRequest(ObservableObjectEventArgs *arg);
    void observablePropertyNameChanged(QString observablePropertyName);
    void rowCountChanged();
    void scrollIncrementally(qreal xVelocity, qreal yVelocity);
    void selectionChanged();
    void selectionModeChanged(SelectionMode selectionMode);
    void showBorderChanged(bool showBorder);
    void skipRolesChanged(QStringList skipRoles);
    void sortEnabledChanged(bool sortEnabled);
    void userEvent(QString eventName, QVariant value);

private:
    bool m_allowHeaderMoving;
    bool m_autogenerateColumns;
    bool m_backgroundEnabled;
    bool m_dragDropStarted;
    bool m_isReadOnly;
    bool m_showBorder;
    bool m_sortEnabled;
    bool m_updateScrollBar;
    DataGridHeaderPresenter *m_header;
    DataGridItemLayout *m_itemLayout;
    DataGridSortFilterProxyModel *m_sortFilterProxyModel;
    int m_currentIndex;
    int m_itemHeight;
    QAbstractItemModel *m_model;
    QList<DataGridColumn*> m_columns;
    QList<int> m_items;
    QMap<int, DataGridRowPresenter*> m_displayedItems;
    QMap<DataGridHeaderItemPresenter*, DataGridDragItemPresenter*> m_draggedHeaders;
    QPointF m_origDrag;
    QQmlComponent *m_defaultHeaderDelegate;
    QQmlComponent *m_defaultItemDelegate;
    QQueue<DataGridRowPresenter*> m_itemsPool;
    QQuickItem *m_dragLayout;
    QQuickItem *m_layout;
    QQuickItem *m_scrollBar;
    QString m_alternativeRowBackground;
    QString m_borderColor;
    QString m_headerBackground;
    QString m_highlightColor;
    QString m_inactiveHighlightColor;
    QString m_observablePropertyName;
    QStringList m_skipRoles;
    QTimer *m_updateDataTimer;
    QTimer *m_updateLayoutTimer;
    SelectionMode m_selectionMode;

    // QQmlParserStatus interface
public:
    void componentComplete() override;

protected:
    void keyPressEvent(QKeyEvent *event) override;
    void mousePressEvent(QMouseEvent *event) override;
};

#endif // DATAGRID_H
